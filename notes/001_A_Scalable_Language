A Scalable Language

"Scala is a blend of object-oriented and functional programming concepts in a
  statically typed language."

  Functional constructs - easily build things quickly from simple parts
  Object-oriented constructs - easy to structure larger systems

High-level example with associative arrays:

  var capital = Map("US" -> "Washington", "France" -> "Paris")
  capital += ("Japan" -> "Tokyo")
  println(capital("France"))

  High-level abstractions like this show the "scripting language" feel of Scala

Cathedral and the Bazaar

  Cathedral - a nearly-perfect piece of software that takes a long time to build
                and then goes relatively unchanged for a long time
  Bazaar - adopted and extended every day by the people working on it

  Scala fits more closely with the Bazaar model. It is meant to be extended by users.

Example function using bolted-on types

  def factorial(x: BigInt): BigInt =
    if (x == 0) 1 else x * factorial(x - 1)

Erlang's Actor Model

  In order to write concurrent programs, while avoiding the problems with
    memory sharing and locking, Scala has adopted a message passing architecture

  Actors communicate by sending messages to each other. Each actor can send
    and receive messages

  To send: recipient ! message. The send is asyncrous, so the sending actor can 
    proceed immediately

  Every actor has a mailbox that acts as a message queue

  actor {
    var sum = 0
    loop {
      receive {
        case Data(bytes)       => sum += hash(bytes)
        case GetSum(requester) => requester ! sum
      }
    }
  }
  
Scala is object-oriented

  "The great idea of object-oriented programming is to make these containers fully
     general, so that they can contain operations as well as data, and that they
     are themselves values that can be stored in other containers..."

  Objects have a lot to do with language scalability. With objects, we can apply
    the same techniques to small programs as large ones.

  "Scala is an object-oriented language in pure form: every value is an object, and 
    every operation is a method call."
    EX: 1 + 2 in Scala invokes the method + defined in the Int class

Scala is functional

 Functional programming is guided by two main ideas:
   1. Functions are first-class values.
     - You can pass functions as arguments, return them as results, store them
       in variables, place them inside the scope of other functions, and create
       anonymous function literals 

   2. Programs should map input values to output values rather than change data.
     - "Immutable data structures are one of the cornerstones of functional programming"

     - Methods should not have any 'side effects'
       - Methods are 'referentially transparent' which means that any method call
         could be replaced by its result without affecting the program's semantics

  Scala allows you to program in an imperative style when desired (programming
    with side effects and mutable data structures)

Scala integrates seamlessly with Java. Scala compiles to JVM bytecode, and Scala can
  call Java methods and inherit from Java classes.

Scala is concise relative to Java (how about relative to some scripting languages?)

  Class constructors are VERY concise:
    class MyClass(index: Int, name: String)

    This creates a class with two private instance variables and a constructor that
      takes those as parameters

Scala is high-level

  Example: Testing if a string has an uppercase letter in it

  // Java
  boolean nameHasUpperCase = false;
  for (int i = 0; i < name.length(); ++i) {
    if (Character.isUpperCase(name.charAt(i))) {
      nameHasUpperCase = true;
      break;
    }
  }

  // Scala
  val nameHasUpperCase = name.exists(_.isUpperCase)

  Scala treats strings as high-level sequences of characters that can be 
    queried with predicates.

Scala is statically typed

  There are many benefits to be gained from using a language that is statically typed:

    1. Verifiable properties
      - Static type systems can prove the absence of certain runtime errors (like
        trying to add an Int and a Boolean)
      - It is not a replacement for unit testing, but it provides something that
        testing never can: "...Edsger Dijkstra said, testing can only prove the
        presence of erros, never their absence."

    2. Safe refactorings
      - Provides a safety net that lets you make changes to a codebase with a high
        degree of confidence
      - Adding an extra parameter to a function can create type errors in many places.
        But, once all these lines have been fixed you can be sure you haven't created
        a problem

    3. Documentation
      - "Static types are program documentation that is checked by the compiler for
        correctness."

Scala has been influenced by ideas from many existing languages including Java, C#, 
  C, C++, Smalltalk, Algol, Simula, SML, OCaml, F#, Haskell, Erlang
