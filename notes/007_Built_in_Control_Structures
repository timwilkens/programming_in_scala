 Built-in Control Structures

  The only built-in control structures are if, while, for, try, match, and function calls

  An important feature to recognize is that most of these constructs result in a value

  This means it is possible to the following:

    val filename = 
      if (!args.isEmpty) args(0)
      else "default.txt"

If expressions

  It is possible to write imperative style if statements

    var filename = "default.txt"
    if (!args.isEmpty)
      filename = args(0)

  Scala prefers the first method written above that puts the filename directly into a val
    - Vals are preferred, in general, because they prevent programmers from having to scan
        a control loop to see if a variable changes
    - Vals also introduce 'equational reasoning.'
      - If a variable is equal to an equation, we can use them interchangeably, assuming
        the equation has no side effects

    "Look for opportunities to use vals. They can make your code both easier to read and
     easier to refactor."

While loops

  Scala has both while loops (where the body may never be executed) and do while loops,
    where the body is always executed at least once

  These two constructs are called "loops", not expressions.
    - neither of them results in a return value
    - they have a return type of Unit

  This means that the Java/C/C++ style while loop below will not work

    var line = ""
    while((line = readLine()) != "")  // line = readline() returns Unit != ""
      println("Read: " + line)  // Infinite loop

  Many functional languages leave out the while loop completely because it is not an expression

  Most while loops can be written more succinctly, though perhaps less clearly, by using
    recursion

  EX:

    // Imperative style

    def gcd(x: Long, y: Long): Long {
      var a = x
      var b = y
      while (a != 0) {
        val temp = a
        a = b % a
        b = temp
      }
      b
    }

  // Functional

  def gcd(x: Long, y: Long): Long = 
    if (y == 0) x else gcd(y, x % y)

  "In general, we recommend you challenge while loops in your code in the same way
     you challenge vars."

For expressions

  "Scala's for expression is a Swiss army knife of iteration."

  The simplest use of a for loop is to iterate over the items in a collection
    - The '<-' syntax is called a generator

  EX: listing the files in the current directory

    val filesHere = (new java.io.File(".")).listFiles
    for (file <- filesHere)
      println(file)

  Scala has two types of Range to iterate over

     for (i <- 1 to 4)  // Inclusive

     for (i <- 1 until 4)  // Excludes upper bound


  The following form, common in other languages, is not common in Scala:

  for (i <- 0 to filesHere.length - 1)
    do.Stuff

Filtering

  Scala style places a postfix if inside the for expression

  EX: get only the files that end with '.scala'

    for (file <- filesHere if file.getName.endsWith(".scala"))
      println(file)

  It is also possible to add multiple filters to the for statement
    - each if statement must end with a semicolon

  for (
    file <- filesHere
    if file.isFile;
    if file.getName.endsWith(".scala")
  ) println(file)

  You can also nest generators inside the condition check of the for loop

  def fileLines(file: java.io.File) = 
    scala.io.Source.fromFile(file).getLines.toList

  def grep(pattern: String) = 
    for (
      file <- filesHere
      if file.getName.endsWith(".scala");
      line <- fileLines(file)
      if line.trim.matches(pattern)
    ) println(file + " : " + line.trim)

  grep(".*gcd.*")

  We can also store computations in variables declared only inside the for condition check
    - these variables act like vals, but without the keyword

    The example above can we re-written as:

  def grep(pattern: String) =
    for (
      file <- filesHere
      if file.getName.endsWith(".scala");
      line <- fileLines(file)
      trimmed = line.trim
      if trimmed.matches(pattern)
    ) println(file + " : " + trimmed)


Producing a new collection

  The 'for yield' construct allows us to create new collections from for loops

    - Instead of looping over each file, and doing something with the '.scala' files, we
      can put them all into a new array

   def scalaFiles = 
     for {
       file <- filesHere
       if file.getName.endsWith(".scala")
     } yield file

    - The type of this collection depends on the type of the items in the iteration clause
    - We iterate over File so the return type is Array[File]

  EX:

    val forLineLengths = 
      for {
        file <- filesHere
        if file.getName.endsWith(".scala")
        line <- fileLines(file)
        trimmed = line.trim
        if trimmed.matches(".*for.*")
      } yield trimmed.length

    - go from Array[File] to Array[Int]

Throwing exceptions

  To signal an error, we can throw an exception as in Java

  val half = 
    if (n % 2 == 0)
      n / 2
    else
      throw new RuntimeException("n must be even")

Catching exceptions

  We use the 'try catch' pattern to handle exceptions

  import java.io.FileReader
  import java.io.FileNotFoundException
  import java.io.IOException

  try {
    val f = new FileReader("input.txt")
  } catch {
    case ex: FileNotFoundException => // Handle missing file
    case ex: IOException => // Handle other I/O error
  }

The finally clause

  We can wrap a clause with a finally to ensure that some code always executes
    - these are generally used to cleanup (close a file, socket, db handle)
    - they should not generally be used to modify return values

  import java.io.FileReader

  val file = new FileReader("input.txt")

  try {
    // Do stuff
  } finally {
    file.close()
  }

  EX: using a catch clause to return a default

  import java.net.URL
  import java.net.MalformedURLException

  def urlFor(path: String) = 
    try {
      new URL(path)
    } catch {
      case e: MalformedURLException =>
        new URL("http://www.scala-lang.org")
    }

Match expressions

  Scala's match is similar to switch in other languages
    - it allows us to choose betwen a number of alternatives

  val firstArg = if (args.length > 0) args(0) else ""

  firstArg match {
    case "salt" => println("pepper")
    case "chips" => prinln("salsa")
    case "eggs" => println("bacon")
    case _ => println("huh?")  // Default case.
  }

  Match is different from switch in a couple ways:
    1. The cases can be things other than Integers (in the above case Strings)
    2. There is no "falling through" / there are no breaks
    3. We can use it to return a value


  val firstArg = if (!args.isEmpty) args(0) else ""
  val friend =
    firstArg match {
      case "salt" => "pepper"
      case "chips" => "salsa"
      case "eggs" => "bacon"
      case _ => "huh?"
    }
  println(friend)

Living without break and continue

  Scala does not include these two constructs because they do not play well with function literals

  The simplest way to achieve this is to "replace every continue by an if and every break
    by a boolean variable."

  // Common pattern without break or continue
  var i = 0
  var foundIt = false
  
  while (i < args.length && !foundIt) {
    if (!args(i).startsWith("-") {
      if (args(i).endsWith(".scala"))
        foundIt = true
    }
    i = i + 1
  }

  // Recursive pattern common in Scala

  def searchFrom(i: Int): Int = 
    if (i >= args.length) -1
    else if (args(i).startsWith("-")) searchFrom(i + 1)
    else if (args(i).endsWith(".scala")) i
    else searchFrom(i + 1)

  val i = searchFrom(0)


  Scala allows variable names to be shadowed, unlike Java, but this should be avoided

Refactoring imperative-style code

  To avoid functions that just print to stdout, i.e. functions with side-effects, we can
  have functions return formatted strings

  // Returns a row as a sequence
  def makeRowSeq(row: Int) =
    for (col <- 1 to 10) yield {
      val prod = (row * col).toString
      val padding = " " * (4 - prod.length)
      padding + prod
  }
  // Returns a row as a string
  def makeRow(row: Int) = makeRowSeq(row).mkString
  // Returns table as a string with one row per line
  def multiTable() = {
    val tableSeq = // a sequence of row strings
      for (row <- 1 to 10)
      yield makeRow(row)
    tableSeq.mkString("\n")
  }

  In general, where imperative style uses while loops and vars, functional style uses vals, 
  for expressions, helper functions, and mkString.
