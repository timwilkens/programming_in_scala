Control Abstraction

Reducing Code Duplication

  "All functions are separated into common parts, which are the same in every invocation of
   the function, and non-common parts, which may vary from one function invocation to the next.
   The common parts are in the body of the function, while the non-common parts must be 
   supplied via arguments."

   
  Higher-order functions are functions that take other functions as arguments.
    - these functions allow us to "condense and simplify code."

  Ex: singleton object used to search for patterns in filenames

  object FileMatcher {
    private def filesHere = (new java.io.File(".")).listFiles

    def filesEnding(query: String) = 
      for (file <- filesHere; if file.getName.endsWith(query))
        yield file
  }

  Eventually, we will start wanting to strap on other functions

    def filesContaining(query: String) = 
      for (file <- filesHere; if file.getName.contains(query))
       yield file

    def filesRegex(query: String) = 
      for (file <- filesHere; if file.getName.matches(query))
        yield file

  But, this starts to get tedious since we are essentially producing the same functionality,
  just with different functions plugged in.

  We can simplify by passing a function literal to a new function 'filesMatching'

    def filesMatching(query: String, matcher: (String, String) => Boolean) = {
      for (file <- filesHere; if matcher(file.getName, query))
        yield file
    }

  Each function that is of a fileMatching style can now be simplified:

    def filesEnding(query: String) = 
      filesMatching(query, _.endsWith(query))

    def filesContaining(query: String) = 
      filesMatching(query, _.contains(query))

Simplifying client code

  In general, we can simplify our code by relying on general, abstract methods
    - the example we use here is the 'exists' method which just checks if any element
      in a collection meets the pass in condition

  EX: method that returns true if the collection contains a negative value

  def containsNeg(num: List[Int]): Boolean = {
    var exists = false
    for (num <- nums)
      if (num < 0)
      exists = true
    exists
  }

  Using the abstract, higher-order exists

  def containsNeg(nums: List[Int]) = nums.exists(_ < 0)

  Another example testing if a collection contains an odd number

  def containsOdd(nums: List[Int]) = nums.exists( _ % 2 == 1)

Currying

  "A curried function is applied to multiple argument lists, instead of just one." 

  Non-curried: def plainOldSum(x: Int, y:Int) = x + y
    - one list of two parameters
 
  Curried: def curriedSum(x: Int)(y: Int) = x + y
    - two lists, each with one parameter

    This 'curried' version is actually invoking two functions. The first takes in the first parameter,
      and returns another function that takes the second one.

    The first function looks something like:
      def first(x: Int) = (y: Int) => x + y

    We can use partially aplied function notation to get a reference to the second function
      var second = curriedSum(2)_
      - this function adds two to whatever argument is passed in
