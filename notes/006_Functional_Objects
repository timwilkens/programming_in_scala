Functional Objects

  Functional Objects are objects that don't have any mutable state.

  Running example: modeling rational numbers
    - a rational number can be expressed as a ratio of two integers (denominator != 0)

    Add - establish a common denominator, and add numerators
    Multiply - denominator * denominator and numerator * numerator
    Divide - flip one rational, and then multiply

    - our rationals are going to be immutable. An operation on rationals yields a new rational

  Start with the API
    - instantiate a new rational by providing a numerator and denominator
    class Rational(n: Int, d: Int)

      - the class declaration does NOT need curly braces (or content)
      - anything placed inside the curly braces will be included as part of the constructoro

  Creating a new instance of Rational prints out "Rational = Rational@94091a"

    - this is the result of calling toString on the newly created object
    - this method is inherited from java.lang.Object

    - we can override inherited methods by writing 'override' before our method def

  class Rational(n: Int, d:Int) {
    override def toString = n + "/" + d
  }

  We must prevent users from creating new Rationals with a denominator of zero.

    - We can accomplish this by using the 'require' method
      - This method takes one boolean parameter, and throws an exception if false

  class Rational(n: Int, d:Int) {
    require(d != 0)
    override def toString = n + "/" + d
  }

  Our add method will be a publicly accessible method that returns a NEW Rational

  In order to add our add method, we need to make n and d publicly accessible fields

    val numer: Int = n
    val denom: Int = d

    These can now be accessed publicly through r.numer and r.denom

  class Rational(n: Int, d: Int) {
    require(d != 0)
    val numer: Int = n
    val denom: Int = d
    override def toString = numer + "/" + denom
    def add(that: Rational): Rational = 
      new Rational(
        numer * that.denom + that.numer * denom,
        denom * that.denom
      )
  }

  Self References

    "The keyword 'this' refers to the object instance on which the currently executing method
      was invoked, or if used in a constructor, the object instance being constructed."

    EX:
      def lessThan(that: Rational) = 
        this.numer * that.denom < that.numer * this.denom
     
        - it is also possible to leave off the 'this' and write just 'numer'

   EX: where this is necessary
     def max(that: Rational) = 
       if (this.lessThan(that)) that else this

  Auxiliary Constructors

    - Alternate constructors from the primary one are called auxiliary constructors
      def this (...)

    - Example use case: Define a Rational(5,1) in short hand by Rational(5)
      - Need a second constructor that doesn't take two parameters, and assumes the denom
        is 1

  class Rational(n: Int, d: Int) {
    require(d != 0)
    val numer: Int = n
    val denom: Int = d
    def this(n: Int) = this(n, 1) // aux constructor

    override def toString = numer + "/" + denom

    def add(that: Rational): Rational = 
      new Rational(
        numer * that.denom + that.numer * denom,
        denom * that.denom
      )
  }

  Every auxiliary constructor will eventually call the standard constructor

  We can create private fields and private methods by prefixing our declarations with 'private'
    - In order to reduce our rationals, we create a private gcd function and g field

  class Rational(n: Int, d: Int) {
    require(d != 0)

    private val g = gcd(n.abs, d.abs)
    val numer = n / g
    val denom = d / g

    def this(n: Int) = this(n, 1)

    def add(that: Rational): Rational =
      new Rational(
        numbr * that.denom + that.numer * denom,
        denom * that.denom
      )

    override def toString = numer + "/" + denom

    private def gcd(a: Int, b: Int): Int = 
      if (b == 0) a else gcd(b, a % b)
  }

  We can create our own operators by replacing 'def add' with 'def +'

  class Rational(n: Int, d: Int) {
    require(d != 0)

    private val g = gcd(n.abs, d.abs)
    val numer = n / g
    val denom = d / g

    def this(n: Int) = this(n, 1)

    def + (that: Rational): Rational =
      new Rational(
        numbr * that.denom + that.numer * denom,
        denom * that.denom
      )

    def * (that: Rational): Rational = 
      new Rational(numer * that.numer, denom * that.denom)

    override def toString = numer + "/" + denom

    private def gcd(a: Int, b: Int): Int = 
      if (b == 0) a else gcd(b, a % b)
  }
